# –∏–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import streamlit as st
from PIL import Image
import torch
import numpy as np
import albumentations as A
from albumentations.pytorch import ToTensorV2
import random
from io import BytesIO
from datetime import datetime

# reportlab –¥–ª—è PDF
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.utils import ImageReader

# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞
pdfmetrics.registerFont(TTFont('DejaVu', 'C:/Users/Mi/vs_projects/caries_detection_app/fonts/DejaVuSans.ttf'))
pdfmetrics.registerFont(TTFont('DejaVu-Bold', 'C:/Users/Mi/vs_projects/caries_detection_app/fonts/DejaVuSans-Bold.ttf'))

# –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown("<h2 style='text-align: center;'>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—Ä–∏–µ—Å–∞ —É –¥–µ—Ç–µ–π –æ—Ç 1 –¥–æ 4 –ª–µ—Ç</h2>", unsafe_allow_html=True)
st.markdown("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑—É–±–æ–≤ —É –¥–µ—Ç–µ–π —Ä–∞–Ω–Ω–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞.")

# –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    model = torch.load("final_model.pth", map_location=torch.device("cpu"), weights_only=False)
    model.eval()
    return model

model = load_model()

# —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
val_transforms = A.Compose([
    A.Resize(224, 224),
    A.Normalize(mean=(0.485, 0.456, 0.406),
                std=(0.229, 0.224, 0.225)),
    ToTensorV2()
])

def predict(image_pil):
    image_np = np.array(image_pil)
    transformed = val_transforms(image=image_np)
    image_tensor = transformed["image"].unsqueeze(0)

    with torch.no_grad():
        output = model(image_tensor)
        probs = torch.softmax(output, dim=1)
        class_idx = torch.argmax(probs, dim=1).item()
        confidence = probs[0][class_idx].item()
    return class_idx, confidence

def process_uploaded_file(uploaded_file):
    return Image.open(uploaded_file).convert("RGB")

caries_recommendations = [
    "–∏–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–∞–¥–∫–∏—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏ –ø–µ—Ä–µ–∫—É—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
    "–Ω–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—Ç–æ—Ä—Å–æ–¥–µ—Ä–∂–∞—â—É—é –¥–µ—Ç—Å–∫—É—é –∑—É–±–Ω—É—é –ø–∞—Å—Ç—É",
    "—á–∏—Å—Ç–∏—Ç–µ –∑—É–±—ã —Ä–µ–±—ë–Ω–∫—É 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å",
    "–Ω–µ –¥–∞–≤–∞–π—Ç–µ —Å–ª–∞–¥–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø—Ä–∏—ë–º–∞–º–∏ –ø–∏—â–∏"
]

healthy_recommendations = [
    "–ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —É—Ö–æ–¥",
    "–ø–æ—Å–µ—â–∞–π—Ç–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞ —Ä–∞–∑ –≤ 6 –º–µ—Å—è—Ü–µ–≤",
    "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º—è–≥–∫—É—é —â—ë—Ç–∫—É –∏ —Ñ—Ç–æ—Ä—Å–æ–¥–µ—Ä–∂–∞—â—É—é –ø–∞—Å—Ç—É",
    "–∏–∑–±–µ–≥–∞–π—Ç–µ —Å–æ–∫–æ–≤ –∏ —Å–ª–∞–¥–∫–∏—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
    "—á–∏—Å—Ç–∏—Ç–µ –∑—É–±—ã —Ä–µ–±—ë–Ω–∫—É —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º –ø–æ 2 –º–∏–Ω—É—Ç—ã"
]

step = st.session_state.get('step', 1)

# —à–∞–≥ 1
if step == 1:
    st.markdown("<h3>–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞</h3>", unsafe_allow_html=True)
    uploaded_file_1 = st.file_uploader("–§–æ—Ç–æ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞", type=["jpg", "jpeg", "png", "heic"])
    st.markdown("**–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ?**")
    st.markdown("1. –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–ª–∏ –ª–∞–º–ø–µ —Å–±–æ–∫—É).\n" 
                "2. –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ —á–µ—Ç–∫–∏–º, –Ω–µ —Ä–∞–∑–º—ã—Ç—ã–º, –∏ –≤ –∫–∞–¥—Ä–µ –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.\n" 
                "3. –ì–æ–ª–æ–≤–∞ —Ä–µ–±—ë–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä—è–º–æ, —Ä–æ—Ç –æ—Ç–∫—Ä—ã—Ç, –∑—É–±—ã —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω—ã, –≥—É–±—ã –Ω–µ –º–µ—à–∞—é—Ç –æ–±–∑–æ—Ä—É.")
    st.markdown('<a href="/static/front_example.jpeg" target="_blank"> –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ üì∑</a> ', unsafe_allow_html=True)

    if uploaded_file_1:
        image_1 = process_uploaded_file(uploaded_file_1)
        st.image(image_1, caption="–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ", use_container_width=True)

        col1, col2, col3 = st.columns([6, 1, 1])
        with col3:
            if st.button("–î–∞–ª–µ–µ"):
                st.session_state['image_1'] = image_1
                st.session_state['step'] = 2
                st.rerun()

# —à–∞–≥ 2
elif step == 2:
    st.markdown("<h3>–®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–µ—Ä—Ö–Ω–µ–π —á–µ–ª—é—Å—Ç–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</h3>", unsafe_allow_html=True)
    uploaded_file_2 = st.file_uploader("–§–æ—Ç–æ –≤–µ—Ä—Ö–Ω–µ–π —á–µ–ª—é—Å—Ç–∏", type=["jpg", "jpeg", "png", "heic"])

    st.markdown('<a href="/static/upper_example.jpg" target="_blank"> –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ üì∑</a> ', unsafe_allow_html=True)

    if uploaded_file_2:
        image_2 = process_uploaded_file(uploaded_file_2)
        st.image(image_2, caption="–í–µ—Ä—Ö–Ω—è—è —á–µ–ª—é—Å—Ç—å", use_container_width=True)
        st.session_state['image_2'] = image_2

    col1, col2, col3 = st.columns([1, 6, 1])
    with col1:
        if st.button("–ù–∞–∑–∞–¥"):
            st.session_state['step'] = 1
            st.rerun()
    with col3:
        if st.button("–î–∞–ª–µ–µ"):
            st.session_state['step'] = 3
            st.rerun()

# —à–∞–≥ 3
elif step == 3:
    st.markdown("<h3>–®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∏–∂–Ω–µ–π —á–µ–ª—é—Å—Ç–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</h3>", unsafe_allow_html=True)
    uploaded_file_3 = st.file_uploader("–§–æ—Ç–æ –Ω–∏–∂–Ω–µ–π —á–µ–ª—é—Å—Ç–∏", type=["jpg", "jpeg", "png", "heic"])

    st.markdown('<a href="/static/lower_example.JPG" target="_blank"> –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ üì∑</a> ', unsafe_allow_html=True)

    if uploaded_file_3:
        image_3 = process_uploaded_file(uploaded_file_3)
        st.image(image_3, caption="–ù–∏–∂–Ω—è—è —á–µ–ª—é—Å—Ç—å", use_container_width=True)
        st.session_state['image_3'] = image_3

    col1, col2, col3 = st.columns([1, 4.5, 2])
    with col1:
        if st.button("–ù–∞–∑–∞–¥"):
            st.session_state['step'] = 2
            st.rerun()

    run_analysis = False
    with col3:
        if st.button("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"):
            run_analysis = True

    if run_analysis:
        results = []

        if 'image_1' in st.session_state:
            class_idx, conf = predict(st.session_state['image_1'])
            results.append(("–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ", class_idx, conf))

        if 'image_2' in st.session_state:
            class_idx, conf = predict(st.session_state['image_2'])
            results.append(("–í–µ—Ä—Ö–Ω—è—è —á–µ–ª—é—Å—Ç—å", class_idx, conf))

        if 'image_3' in st.session_state:
            class_idx, conf = predict(st.session_state['image_3'])
            results.append(("–ù–∏–∂–Ω—è—è —á–µ–ª—é—Å—Ç—å", class_idx, conf))

        final_label = "–ö–∞—Ä–∏–µ—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω" if any(class_idx == 0 for _, class_idx, _ in results) else "–ö–∞—Ä–∏–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        avg_confidence = round(np.mean([conf for _, _, conf in results]) * 100)

        if final_label == "–ö–∞—Ä–∏–µ—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω":
            st.markdown(f"### –ò—Ç–æ–≥: {final_label}")
            st.markdown(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è –∫–∞—Ä–∏–µ—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {avg_confidence}%.")
            selected = random.sample(caries_recommendations, k=1)
            recommendations_text = ", ".join(selected) + "."
            st.markdown(f"<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–µ—Ç—Å–∫–æ–º—É —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏, {recommendations_text}", unsafe_allow_html=True)
        else:
            st.markdown(f"### –ò—Ç–æ–≥: {final_label}")
            st.markdown(f"–ö–∞—Ä–∏–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {avg_confidence}%.")
            selected = random.sample(healthy_recommendations, k=2)
            recommendations_text = ", ".join(selected) + "."
            st.markdown(f"<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> {recommendations_text}", unsafe_allow_html=True)

        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ PDF-–æ—Ç—á–µ—Ç–∞
        pdf_buffer = BytesIO()
        c = canvas.Canvas(pdf_buffer, pagesize=A4)
        width, height = A4
        y = height - 50

        c.setFont("DejaVu-Bold", 16)
        c.drawCentredString(width / 2, y, "–û—Ç—á–µ—Ç –ø–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∫–∞—Ä–∏–µ—Å–∞")
        c.setFont("DejaVu", 12)
        y -= 30
        c.drawString(50, y, f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
        y -= 20
        c.drawString(50, y, f"–ò—Ç–æ–≥: {final_label}")
        y -= 20
        c.drawString(50, y, f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {avg_confidence}%")
        y -= 30

        c.drawString(50, y, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        y -= 20
        for line in recommendations_text.split(","):
            if final_label == "–ö–∞—Ä–∏–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
                c.drawString(60, y, f"- {line.strip()}")
                y -= 20
            else:
                c.drawString(60,y, "- –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–µ—Ç—Å–∫–æ–º—É —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏")
                y -= 20
                c.drawString(60, y, f"- {line.strip()}")
                y -= 20
                

        c.setFillColorRGB(1, 0, 0)
        c.drawString(50, y, "‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–∏–∞–≥–Ω–æ–∑–æ–º.")
        c.setFillColorRGB(0, 0, 0)

        image_map = {
            "–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ": st.session_state.get('image_1'),
            "–í–µ—Ä—Ö–Ω—è—è —á–µ–ª—é—Å—Ç—å": st.session_state.get('image_2'),
            "–ù–∏–∂–Ω—è—è —á–µ–ª—é—Å—Ç—å": st.session_state.get('image_3')
        }

        y -= 30  # –Ω–µ–º–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞ –ø–µ—Ä–µ–¥ —Ñ–æ—Ç–æ
        c.setFont("DejaVu-Bold", 12)
        c.drawString(50, y, "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        c.setFont("DejaVu", 12)
        y -= 20

        for label, img in image_map.items():
            if img:
                c.setFont("DejaVu", 12)
                c.drawString(60, y, f"{label}:")

                img_buffer = BytesIO()
                img.save(img_buffer, format='PNG')
                img_buffer.seek(0)

                image = ImageReader(img_buffer)
                img_width = 250  
                img_height = 150
                c.drawImage(image, 60, y - img_height, width=img_width, height=img_height, preserveAspectRatio=True, mask='auto')
                y -= (img_height + 20)


        c.save()
        pdf_buffer.seek(0)

        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å PDF-–æ—Ç—á–µ—Ç",
            data=pdf_buffer,
            file_name="diagnosis_report.pdf",
            mime="application/pdf"
        )

# –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
st.warning("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–∏–∞–≥–Ω–æ–∑–æ–º. –î–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
